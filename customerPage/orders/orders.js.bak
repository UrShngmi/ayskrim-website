console.log('orders.js loaded');

document.addEventListener('DOMContentLoaded', function() {
    console.log("Orders page script initialized");
    
    // Ensure this script doesn't interfere with navbar
    const navbarInitialized = document.querySelector('.navbar-bg');
    const logoContainer = document.getElementById('logoContainer');
    const fixedHeader = document.querySelector('.fixed-header');
    
    if (navbarInitialized) {
        console.log("Navbar detected, ensuring compatibility");
        // Make sure we don't override the navbar scroll handlers
        // The scroll handler is already defined in navbar.js
        // We're just ensuring it's properly initialized here as well
        if (logoContainer && fixedHeader) {
            // Initial check for scroll position on page load
            setTimeout(() => {
                const currentScroll = window.scrollY;
                if (currentScroll > 15) {
                    logoContainer.classList.add('scrolled');
                    fixedHeader.classList.add('scrolled');
                }
            }, 100);
        }
    }
    
    // Handle recommended items navigation
    const prevButton = document.querySelector('.item-nav-button.prev-button');
    const nextButton = document.querySelector('.item-nav-button.next-button');
    const itemsGrid = document.querySelector('.items-grid');
    
    if (prevButton && nextButton && itemsGrid) {
        let scrollAmount = 0;
        const itemWidth = itemsGrid.querySelector('.item-card')?.offsetWidth || 200;
        const scrollDistance = itemWidth + 24; // Item width + gap
        
        prevButton.addEventListener('click', () => {
            scrollAmount = Math.max(scrollAmount - scrollDistance, 0);
            itemsGrid.scrollTo({
                left: scrollAmount,
                behavior: 'smooth'
            });
        });
        
        nextButton.addEventListener('click', () => {
            const maxScroll = itemsGrid.scrollWidth - itemsGrid.clientWidth;
            scrollAmount = Math.min(scrollAmount + scrollDistance, maxScroll);
            itemsGrid.scrollTo({
                left: scrollAmount,
                behavior: 'smooth'
            });
        });
        
        // Add horizontal scrolling styles to items grid
        itemsGrid.style.display = 'flex';
        itemsGrid.style.overflowX = 'hidden';
        itemsGrid.style.scrollBehavior = 'smooth';
        itemsGrid.style.gap = '24px';
        
        // Make item cards have consistent width
        const itemCards = itemsGrid.querySelectorAll('.item-card');
        itemCards.forEach(card => {
            card.style.minWidth = '200px';
            card.style.maxWidth = '200px';
            card.style.flex = '0 0 auto';
        });
    }
    
    // View mode switching (Grid/List/Calendar)
    const viewButtons = document.querySelectorAll('.view-btn');
    viewButtons.forEach(btn => {
        btn.addEventListener('click', function() {
            // Get the view type
            const viewType = this.getAttribute('data-view');
            
            // Find the container that contains this button
            const container = this.closest('.upcoming-bookings-container, .past-bookings-container, .past-orders-container');
            
            if (container) {
                // Get all cards in this container
                const cards = container.querySelectorAll('.booking-card, .past-order-card');
                
                // Remove active class from all view buttons in this container
                const containerViewButtons = container.querySelectorAll('.view-btn');
                containerViewButtons.forEach(btn => btn.classList.remove('active'));
                
                // Add active class to clicked button
                this.classList.add('active');
                
                // Handle calendar view
                if (viewType === 'calendar') {
                    // For now, just show an alert that calendar view is not implemented
                    alert('Calendar view will be implemented in a future update.');
                    return;
                }
                
                // Apply grid or list view
                cards.forEach(card => {
                    card.classList.remove('grid-view', 'list-view');
                    card.classList.add(viewType + '-view');
                });
                
                // Apply any container-level classes for layout
                if (viewType === 'list') {
                    container.querySelector('.booking-cards, .past-order-cards').classList.add('list-layout');
                } else {
                    container.querySelector('.booking-cards, .past-order-cards').classList.remove('list-layout');
                }
            }
        });
    });
    
    // Initialize variables
    let activeMainTab = 'orders';
    let activeOrdersTab = 'active-orders';
    let activeBookingsTab = 'upcoming-bookings';
    let viewMode = 'grid';
    let mapView = 'standard';
    let selectedOrderId = null;
    
    // Get DOM elements
    const mainTabBtns = document.querySelectorAll('.main-tab-btn');
    const mainTabsSlider = document.getElementById('main-tabs-slider');
    const secondaryTabBtns = document.querySelectorAll('.secondary-tab-btn');
    const ordersTabsSlider = document.getElementById('orders-tabs-slider');
    const bookingsTabsSlider = document.getElementById('bookings-tabs-slider');
    const viewBtns = document.querySelectorAll('.view-btn[data-view]');
    const dropdownTriggers = document.querySelectorAll('.dropdown-trigger');
    const viewControls = document.getElementById('view-controls');
    const orderCards = document.querySelectorAll('.order-card');
    const trackOrderBtns = document.querySelectorAll('.track-order-btn');
    const mapViewBtns = document.querySelectorAll('.map-view-btn');
    const mapFullscreenBtn = document.getElementById('map-fullscreen-btn');
    const driverMarker = document.getElementById('driver-marker');
    const deliveryRoute = document.getElementById('delivery-route');
    
    // Initialize tabs
    initTabs();
    
    // Initialize event listeners
    initEventListeners();
    
    // Map view toggle functionality
    const mapViewOptions = document.querySelectorAll('.map-view-option');
    const orderMap = document.getElementById('orderMap');
    const orderDetails = document.getElementById('orderDetails');
    
    if (mapViewOptions.length) {
        mapViewOptions.forEach(option => {
            option.addEventListener('click', function() {
                // Remove active class from all options
                mapViewOptions.forEach(opt => opt.classList.remove('active'));
                // Add active class to clicked option
                this.classList.add('active');
                
                // Toggle between map and order details
                if (this.textContent.trim() === 'Live Map') {
                    orderMap.style.display = 'block';
                    orderDetails.style.display = 'none';
                } else {
                    orderMap.style.display = 'none';
                    orderDetails.style.display = 'block';
                }
            });
        });
    }
    
    // Details link click handler
    const detailsLinks = document.querySelectorAll('.details-link');
    detailsLinks.forEach(link => {
        link.addEventListener('click', async function(e) {
            e.preventDefault();
            const orderId = this.getAttribute('data-order-id');
            
            // Switch to order details view
            mapViewOptions.forEach(opt => opt.classList.remove('active'));
            mapViewOptions[1].classList.add('active');
            orderMap.style.display = 'none';
            orderDetails.style.display = 'block';
            
            // Show loading state
            orderDetails.querySelector('.order-details-content').innerHTML = `
                <div class="order-details-loading">
                    <div class="spinner"></div>
                    <p>Loading order details...</p>
                </div>
            `;
            
            // Fetch and display order details
            const orderData = await fetchOrderDetails(orderId);
            if (orderData) {
                displayOrderDetails(orderData);
            } else {
                orderDetails.querySelector('.order-details-content').innerHTML = `
                    <div class="error-message">
                        <p>Failed to load order details. Please try again.</p>
                    </div>
                `;
            }
            
            // Scroll to map container
            const mapContainer = document.querySelector('.live-tracking');
            if (mapContainer) {
                mapContainer.scrollIntoView({ behavior: 'smooth' });
            }
        });
    });
    
    // Track button click handler
    const trackButtons = document.querySelectorAll('.track-button');
    trackButtons.forEach(button => {
        button.addEventListener('click', function() {
            const orderId = this.getAttribute('data-order-id');
            
            // Switch to live map view
            mapViewOptions.forEach(opt => opt.classList.remove('active'));
            mapViewOptions[0].classList.add('active');
            orderMap.style.display = 'block';
            orderDetails.style.display = 'none';
            
            // Scroll to map container
            const mapContainer = document.querySelector('.live-tracking');
            if (mapContainer) {
                mapContainer.scrollIntoView({ behavior: 'smooth' });
            }
        });
    });
    
    // Sort menu toggle functionality
    const sortButtons = document.querySelectorAll('.sort-button');
    const sortMenus = document.querySelectorAll('.sort-menu');
    
    sortButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.stopPropagation();
            
            // Get the corresponding menu
            const menuId = this.id.replace('Button', 'Menu');
            const menu = document.getElementById(menuId);
            
            if (menu) {
                // Close all other menus first
                sortMenus.forEach(m => {
                    if (m.id !== menuId) {
                        m.classList.remove('active');
                    }
                });
                
                // Toggle the current menu
                menu.classList.toggle('active');
            }
        });
    });
    
    // Close sort menus when clicking elsewhere on the page
    document.addEventListener('click', function() {
        sortMenus.forEach(menu => {
            menu.classList.remove('active');
        });
    });
    
    // Prevent closing when clicking inside the menus
    sortMenus.forEach(menu => {
        menu.addEventListener('click', function(e) {
            e.stopPropagation();
        });
    });
    
    // Handle sort options
    const sortOptions = document.querySelectorAll('.sort-option');
    sortOptions.forEach(option => {
        option.addEventListener('click', function() {
            const sortType = this.getAttribute('data-sort');
            const containerId = this.closest('.sort-menu').id.replace('Menu', '').replace('sort', '').toLowerCase();
            sortItems(sortType, containerId);
            
            // Update button text to show current sort
            const optionText = this.querySelector('span').textContent;
            const buttonId = this.closest('.sort-menu').id.replace('Menu', 'Button');
            const button = document.getElementById(buttonId);
            if (button) {
                button.innerHTML = `<i class="fas fa-sort"></i><span>${optionText}</span>`;
            }
            
            // Close the menu
            this.closest('.sort-menu').classList.remove('active');
        });
    });
    
    // Function to sort items (orders or bookings)
    function sortItems(sortType, containerId) {
        const containerSelector = containerId === 'orders' ? '.past-order-cards' : 
                                 (containerId === 'upcomingbookings' ? '.upcoming-bookings .booking-cards' : 
                                 '.past-bookings .booking-cards');
        
        const itemSelector = containerId === 'orders' ? '.past-order-card' : '.booking-card';
        const container = document.querySelector(containerSelector);
        const items = container?.querySelectorAll(itemSelector);
        
        if (!container || !items || items.length === 0) return;
        
        const itemsArray = Array.from(items);
        
        itemsArray.sort((a, b) => {
            if (sortType === 'date-newest') {
                const dateA = new Date(a.querySelector('.order-date, .booking-title-overlay p').textContent);
                const dateB = new Date(b.querySelector('.order-date, .booking-title-overlay p').textContent);
                return dateB - dateA;
            } else if (sortType === 'date-oldest') {
                const dateA = new Date(a.querySelector('.order-date, .booking-title-overlay p').textContent);
                const dateB = new Date(b.querySelector('.order-date, .booking-title-overlay p').textContent);
                return dateA - dateB;
            } else if (sortType === 'price-high') {
                const priceA = parseFloat(a.querySelector('.order-price').textContent.replace('$', ''));
                const priceB = parseFloat(b.querySelector('.order-price').textContent.replace('$', ''));
                return priceB - priceA;
            } else if (sortType === 'price-low') {
                const priceA = parseFloat(a.querySelector('.order-price').textContent.replace('$', ''));
                const priceB = parseFloat(b.querySelector('.order-price').textContent.replace('$', ''));
                return priceA - priceB;
            }
            return 0;
        });
        
        // Clear and append sorted items
        container.innerHTML = '';
        itemsArray.forEach(item => {
            container.appendChild(item);
        });
    }
    
    // Add search functionality
    const searchBar = document.querySelector('.search-bar input');
    if (searchBar) {
        searchBar.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const orderCards = document.querySelectorAll('.past-order-card');
            
            orderCards.forEach(card => {
                const orderNumber = card.querySelector('.order-number').textContent.toLowerCase();
                const orderAddress = card.querySelector('.order-address span').textContent.toLowerCase();
                const orderComment = card.querySelector('.order-comment').textContent.toLowerCase();
                
                if (orderNumber.includes(searchTerm) || 
                    orderAddress.includes(searchTerm) || 
                    orderComment.includes(searchTerm)) {
                    card.style.display = 'flex';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    }
    
    // Toggle booking details for both Upcoming and Past Bookings sections
    const toggleDetailsLinks = document.querySelectorAll('.toggle-details');
    const hideDetailsLinks = document.querySelectorAll('.hide-details-link');
    
    toggleDetailsLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            const bookingId = this.getAttribute('data-booking');
            const detailsSection = document.getElementById(`booking-details-${bookingId}`);
            
            // Hide all other expanded details
            const allExpandedDetails = document.querySelectorAll('.booking-details-expanded');
            allExpandedDetails.forEach(details => {
                if (details.id !== `booking-details-${bookingId}`) {
                    details.classList.remove('active');
                }
            });
            
            // Toggle this details section
            detailsSection.classList.add('active');
            
            // Change the arrow icon
            this.querySelector('i').classList.remove('fa-chevron-right');
            this.querySelector('i').classList.add('fa-chevron-down');
            
            // Change the text
            const viewDetailsLink = this.closest('.view-details-link');
            viewDetailsLink.querySelector('a').textContent = 'Hide details';
        });
    });
    
    hideDetailsLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            const bookingId = this.getAttribute('data-booking');
            const detailsSection = document.getElementById(`booking-details-${bookingId}`);
            
            // Hide the details section
            detailsSection.classList.remove('active');
            
            // Change the arrow icon in the view details link
            const viewDetailsLink = document.querySelector(`.toggle-details[data-booking="${bookingId}"]`);
            viewDetailsLink.querySelector('i').classList.remove('fa-chevron-down');
            viewDetailsLink.querySelector('i').classList.add('fa-chevron-right');
            
            // Change the text back
            viewDetailsLink.textContent = 'View details';
        });
    });
    
    // Implement search functionality for upcoming bookings
    const upcomingBookingSearchBar = document.querySelector('.upcoming-bookings-container .search-bar input');
    if (upcomingBookingSearchBar) {
        upcomingBookingSearchBar.addEventListener('input', function() {
            searchBookings(this, '.upcoming-bookings-container .booking-card');
        });
    }
    
    // Implement search functionality for past bookings
    const pastBookingSearchBar = document.querySelector('.past-bookings-container .search-bar input');
    if (pastBookingSearchBar) {
        pastBookingSearchBar.addEventListener('input', function() {
            searchBookings(this, '.past-bookings-container .booking-card');
        });
    }
    
    // Generic function to search bookings
    function searchBookings(searchInput, cardSelector) {
        const searchTerm = searchInput.value.toLowerCase();
        const bookingCards = document.querySelectorAll(cardSelector);
        
        bookingCards.forEach(card => {
            const title = card.querySelector('.booking-title-overlay h4').textContent.toLowerCase();
            const date = card.querySelector('.booking-title-overlay p').textContent.toLowerCase();
            const location = card.querySelector('.booking-detail:nth-child(2) span').textContent.toLowerCase();
            const services = Array.from(card.querySelectorAll('.service-tag')).map(tag => tag.textContent.toLowerCase()).join(' ');
            
            // Also search in the review if it exists
            let review = '';
            const reviewElement = card.querySelector('.booking-review p');
            if (reviewElement) {
                review = reviewElement.textContent.toLowerCase();
            }
            
            if (title.includes(searchTerm) || 
                date.includes(searchTerm) || 
                location.includes(searchTerm) || 
                services.includes(searchTerm) ||
                review.includes(searchTerm)) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    }
    
    // Handle action buttons
    document.querySelectorAll('.action-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            // Get the action type
            let actionType = '';
            if (this.classList.contains('details-btn')) {
                actionType = 'view details';
            } else if (this.classList.contains('reschedule-btn')) {
                actionType = 'reschedule';
            } else if (this.classList.contains('cancel-btn')) {
                actionType = 'cancel';
            }
            
            // Get the booking title
            const card = this.closest('.booking-card');
            const bookingTitle = card.querySelector('.booking-title-overlay h4').textContent;
            
            // For a real app, this would call an API or navigate to another page
            // For this demo, we'll just log the action
            console.log(`Action: ${actionType} for booking "${bookingTitle}"`);
            
            // If it's the details button, toggle the expanded details
            if (actionType === 'view details') {
                const toggleLink = card.querySelector('.toggle-details');
                if (toggleLink) {
                    toggleLink.click();
                }
            }
        });
    });
    
    // Functions
    function initTabs() {
        // Set initial active tabs based on URL parameters or defaults
        const urlParams = new URLSearchParams(window.location.search);
        const mainTabParam = urlParams.get('mainTab');
        const secondaryTabParam = urlParams.get('secondaryTab');
        
        if (mainTabParam) {
            activeMainTab = mainTabParam;
        }
        
        if (secondaryTabParam) {
            if (activeMainTab === 'orders') {
                activeOrdersTab = secondaryTabParam + '-orders';
            } else {
                activeBookingsTab = secondaryTabParam + '-bookings';
            }
        }
        
        // Set initial active tabs
        document.getElementById('orders-tab').classList.toggle('active', activeMainTab === 'orders');
        document.getElementById('bookings-tab').classList.toggle('active', activeMainTab === 'bookings');
        
        document.getElementById('active-orders-tab').classList.toggle('active', activeOrdersTab === 'active-orders');
        document.getElementById('past-orders-tab').classList.toggle('active', activeOrdersTab === 'past-orders');
        
        document.getElementById('upcoming-bookings-tab').classList.toggle('active', activeBookingsTab === 'upcoming-bookings');
        document.getElementById('past-bookings-tab').classList.toggle('active', activeBookingsTab === 'past-bookings');
        
        // Set initial slider positions
        updateMainTabSlider();
        updateSecondaryTabSlider('orders');
        updateSecondaryTabSlider('bookings');
        
        // Select first order by default if on orders tab
        if (activeMainTab === 'orders' && orderCards.length > 0) {
            selectOrder(orderCards[0].getAttribute('data-order-id'));
        }
    }
    
    function initEventListeners() {
        // Calendar view buttons click handler
        const calendarViewBtns = document.querySelectorAll('.calendar-view-btn');
        calendarViewBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                // Use the correct path to the calendar.php file
                window.location.href = '/calendar/calendar.php';
            });
        });
        
        // Main tab buttons
        mainTabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const tab = btn.getAttribute('data-tab');
                switchMainTab(tab);
            });
        });
        
        // Secondary tab buttons
        secondaryTabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const tab = btn.getAttribute('data-tab');
                
                if (tab === 'active-orders' || tab === 'past-orders') {
                    switchSecondaryTab(tab, 'orders');
                } else if (tab === 'upcoming-bookings' || tab === 'past-bookings') {
                    switchSecondaryTab(tab, 'bookings');
                }
        });
    });

        // View mode buttons
        viewBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const mode = btn.getAttribute('data-view');
                switchViewMode(mode);
            });
        });
        
        // Dropdown triggers
        dropdownTriggers.forEach(trigger => {
            trigger.addEventListener('click', (e) => {
                e.stopPropagation();
                const dropdown = trigger.nextElementSibling;
                dropdown.classList.toggle('active');
        });
    });

        // Close dropdowns when clicking outside
        document.addEventListener('click', () => {
            document.querySelectorAll('.dropdown-menu.active').forEach(menu => {
                menu.classList.remove('active');
            });
        });
        
        // Order cards
        orderCards.forEach(card => {
            card.addEventListener('click', () => {
                const orderId = card.getAttribute('data-order-id');
                selectOrder(orderId);
        });
    });

        // Track order buttons
        trackOrderBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const orderId = btn.getAttribute('data-order-id');
                selectOrder(orderId);
                scrollToMap();
            });
        });
        
        // Map view buttons
        if (mapViewBtns) {
            mapViewBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    const view = btn.getAttribute('data-map-view');
                    switchMapView(view);
                });
            });
        }
        
        // Map fullscreen button
        if (mapFullscreenBtn) {
            mapFullscreenBtn.addEventListener('click', toggleMapFullscreen);
        }
    }
    
    function switchMainTab(tab) {
        // Update active tab
        activeMainTab = tab;
        
        // Update tab buttons
        mainTabBtns.forEach(btn => {
            if (btn.getAttribute('data-tab') === tab) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        });
        
        // Update tab content
        document.querySelectorAll('.tab-pane').forEach(pane => {
            pane.classList.remove('active');
        });
        document.getElementById(tab + '-tab').classList.add('active');
        
        // Update slider position
        updateMainTabSlider();
        
        // Add animation class to content
        const tabContent = document.querySelector(`#${tab}-tab .tab-content-inner`);
        if (tabContent) {
            tabContent.style.animation = 'none';
            setTimeout(() => {
                tabContent.style.animation = 'fadeIn 0.3s ease';
            }, 10);
        }
        
        // Update URL parameter
        const url = new URL(window.location);
        url.searchParams.set('mainTab', tab);
        history.pushState({}, '', url);
        
        // Reset secondary tab to first tab
        if (tab === 'orders') {
            switchSecondaryTab('active-orders', 'orders');
        } else {
            switchSecondaryTab('upcoming-bookings', 'bookings');
        }
    }
    
    function switchSecondaryTab(tab, type) {
        // Update active tab
        if (type === 'orders') {
            activeOrdersTab = tab;
        } else {
            activeBookingsTab = tab;
        }
        
        // Update tab buttons
        secondaryTabBtns.forEach(btn => {
            if (btn.getAttribute('data-tab') === tab) {
                btn.classList.add('active');
            } else if (
                (type === 'orders' && (btn.getAttribute('data-tab') === 'active-orders' || btn.getAttribute('data-tab') === 'past-orders')) ||
                (type === 'bookings' && (btn.getAttribute('data-tab') === 'upcoming-bookings' || btn.getAttribute('data-tab') === 'past-bookings'))
            ) {
                btn.classList.remove('active');
            }
        });
        
        // Update tab content
        document.querySelectorAll('.secondary-tab-pane').forEach(pane => {
            if (pane.id === tab + '-tab') {
                pane.classList.add('active');
            } else if (
                (type === 'orders' && (pane.id === 'active-orders-tab' || pane.id === 'past-orders-tab')) ||
                (type === 'bookings' && (pane.id === 'upcoming-bookings-tab' || pane.id === 'past-bookings-tab'))
            ) {
                pane.classList.remove('active');
            }
        });
        
        // Update slider position
        updateSecondaryTabSlider(type);
        
        // Update URL parameter
        const secondaryTabValue = tab.replace('-orders', '').replace('-bookings', '');
        const url = new URL(window.location);
        url.searchParams.set('secondaryTab', secondaryTabValue);
        history.pushState({}, '', url);
    }
    
    function switchViewMode(mode) {
        // Update active mode
        viewMode = mode;
        
        // Update view buttons
        viewBtns.forEach(btn => {
            if (btn.getAttribute('data-view') === mode) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        });
        
        // Update layouts
        updateViewMode();
    }
    
    function updateViewMode() {
        const orderGrid = document.getElementById('active-orders-grid');
        const pastOrdersContainer = document.querySelector('.order-history .order-grid');
        const bookingGrid = document.querySelector('.booking-grid');
        
        if (orderGrid) {
            orderGrid.classList.toggle('list-view', viewMode === 'list');
        }
        
        if (pastOrdersContainer) {
            pastOrdersContainer.classList.toggle('list-view', viewMode === 'list');
        }
        
        if (bookingGrid) {
            bookingGrid.classList.toggle('list-view', viewMode === 'list');
        }
    }
    
    function switchMapView(view) {
        // Update active view
        mapView = view;
        
        // Update view buttons
        mapViewBtns.forEach(btn => {
            if (btn.getAttribute('data-map-view') === view) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        });
        
        // Update map
        const mapElement = document.getElementById('map');
        
    if (mapElement) {
            mapElement.className = 'map ' + view + '-view';
            
            // Additional map-specific updates could be added here
            // For a real map implementation, you'd update the map tiles or layers
        }
    }
    
    function selectOrder(orderId) {
        // Update selected order
        selectedOrderId = orderId;
        
        // Update order cards
        orderCards.forEach(card => {
            card.classList.toggle('active', card.getAttribute('data-order-id') === orderId);
        });
        
        // Update map for selected order
        updateMapForOrder(orderId);
    }
    
    function updateMapForOrder(orderId) {
        // Here you would update the map to show the route for the selected order
        // This is a simplified version that just updates the visual elements
        
        // Animate driver marker
        if (driverMarker) {
            // Reset animation
            driverMarker.style.animation = 'none';
            driverMarker.offsetHeight; // Trigger reflow
            driverMarker.style.animation = 'moveDriver 10s linear infinite';
        }
        
        // Animate delivery route
        if (deliveryRoute) {
            deliveryRoute.style.animation = 'none';
            deliveryRoute.offsetHeight; // Trigger reflow
            deliveryRoute.style.animation = 'dashOffset 30s linear infinite';
        }
    }
    
    function scrollToMap() {
        const mapContainer = document.querySelector('.order-map-container');
        if (mapContainer) {
            mapContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    }
    
    function toggleMapFullscreen(map) {
        const mapContainer = document.querySelector('.map-container');
        if (!mapContainer) return;
        
        mapContainer.classList.toggle('fullscreen');
        
        if (mapContainer.classList.contains('fullscreen')) {
            document.body.style.overflow = 'hidden';
            const fullscreenButton = document.querySelector('.map-fullscreen-button i');
            if (fullscreenButton) {
                fullscreenButton.classList.remove('fa-expand');
                fullscreenButton.classList.add('fa-compress');
            }
        } else {
            document.body.style.overflow = '';
            const fullscreenButton = document.querySelector('.map-fullscreen-button i');
            if (fullscreenButton) {
                fullscreenButton.classList.remove('fa-compress');
                fullscreenButton.classList.add('fa-expand');
            }
        }
        
        // Important: when container size changes, Leaflet needs to recalculate
        if (map) {
            setTimeout(() => {
                map.invalidateSize();
            }, 100);
        }
    }
    
    function updateMainTabSlider() {
        if (mainTabsSlider) {
            const activeIndex = Array.from(mainTabBtns).findIndex(btn => btn.classList.contains('active'));
            if (activeIndex === 0) {
                mainTabsSlider.style.transform = 'translateX(0)';
            } else {
                mainTabsSlider.style.transform = 'translateX(100%)';
            }
        }
    }
    
    function updateSecondaryTabSlider(type) {
        const slider = type === 'orders' ? ordersTabsSlider : bookingsTabsSlider;
        const activeBtn = type === 'orders' 
            ? document.querySelector('.secondary-tab-btn[data-tab="' + activeOrdersTab + '"]')
            : document.querySelector('.secondary-tab-btn[data-tab="' + activeBookingsTab + '"]');
        
        if (slider && activeBtn) {
            const activeIndex = Array.from(
                activeBtn.parentElement.querySelectorAll('.secondary-tab-btn')
            ).indexOf(activeBtn);
            
            if (activeIndex === 0) {
                slider.style.transform = 'translateX(0)';
            } else {
                slider.style.transform = 'translateX(100%)';
            }
        }
    }

    // === ACTIVE ORDERS MAP INTEGRATION PATCH START ===
    async function fetchActiveOrders() {
        const res = await fetch('/ayskrimWebsite/api/orders/fetchActiveOrders.php');
        const data = await res.json();
        return data.orders || [];
    }
    
    async function fetchOrderDetails(orderId) {
        const res = await fetch(`/ayskrimWebsite/api/orders/fetchOrderDetails.php?orderId=${orderId}`);
        const data = await res.json();
        return data.order || null;
    }

    async function geocodeAddress(address) {
        if (!address) return null;
        const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`;
        try {
            const res = await fetch(url);
            const results = await res.json();
            if (results.length > 0) {
                return { lat: parseFloat(results[0].lat), lon: parseFloat(results[0].lon) };
            }
        } catch (e) { console.error('Geocoding failed', e); }
        return null;
    }

    async function renderActiveOrdersAndMap() {
        console.log('renderActiveOrdersAndMap called');
        const container = document.querySelector('.order-list');
        const loadingDiv = container.querySelector('.active-orders-loading');
        if (loadingDiv) loadingDiv.style.display = 'flex';
        // Fetch and geocode
        const orders = await fetchActiveOrders();
        orders.sort((a, b) => a.id - b.id);
        // Geocode all addresses in parallel
        const geocoded = await Promise.all(orders.map(async order => {
            const coords = await geocodeAddress(order.shipping_address);
            return coords ? { ...order, coords } : null;
        }));
        const validOrders = geocoded.filter(Boolean);
        // Remove loading spinner
        if (loadingDiv) loadingDiv.remove();
        // If no orders, show message
        if (validOrders.length === 0) {
            container.innerHTML = '<div style="text-align:center;color:#ec4899;font-weight:500;padding:2em 0;">No active orders found.</div>';
            // Remove any existing map
            const mapDiv = document.getElementById('orderMap');
            if (mapDiv && mapDiv._leaflet_id) {
                mapDiv._leaflet_id = null;
                mapDiv.innerHTML = '';
            }
            return;
        }
        // Initialize map only after data is ready
        const mapDiv = document.getElementById('orderMap');
        if (mapDiv && mapDiv._leaflet_id) {
            mapDiv._leaflet_id = null;
            mapDiv.innerHTML = '';
        }
        const map = L.map('orderMap').setView([validOrders[0].coords.lat, validOrders[0].coords.lon], 14);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);
        const markers = [];
        validOrders.forEach((order, idx) => {
            const marker = L.marker([order.coords.lat, order.coords.lon]).addTo(map)
                .bindPopup(`Order #${order.id}<br>${order.shipping_address}`);
            markers.push({ orderId: order.id, marker, coords: order.coords });
        });
        // Fit map to all markers
        const group = new L.featureGroup(markers.map(m => m.marker));
        map.fitBounds(group.getBounds(), { padding: [50, 50] });
        // Render orders in the container
        container.innerHTML = '';
        validOrders.forEach((order, idx) => {
            // Create a more detailed order card
            const div = document.createElement('div');
            div.className = 'order-item';
            div.setAttribute('data-order-id', order.id);
            div.tabIndex = 0;
            
            // Status class based on order status
            const statusClass = order.order_status ? order.order_status.toLowerCase().replace(' ', '-') : 'processing';
            
            // Format the order item HTML
            div.innerHTML = `
                <div class="order-header">
                    <div>
                        <span class="order-id">ORD-${order.id}</span>
                        <span class="order-date">${new Date(order.created_at).toLocaleDateString()}</span>
                    </div>
                    <span class="order-status ${statusClass}">${order.order_status || 'Processing'}</span>
                </div>
                <div class="order-info">
                    <div class="order-eta">
                        <i class="far fa-clock"></i>
                        ${order.estimated_delivery_time ? 
                            `ETA: ${new Date(order.estimated_delivery_time).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}` : 
                            'ETA: Processing'}
                    </div>
                    <div class="order-price">
                        ₱${parseFloat(order.total_amount).toFixed(2)}
                    </div>
                </div>
                <div class="order-actions">
                    <button class="order-action-button track-button" data-order-id="${order.id}">
                        <i class="fas fa-truck"></i>
                        Track Order
                    </button>
                    <button class="order-action-button contact-button">
                        <i class="fas fa-phone"></i>
                        Contact
                    </button>
                </div>
                <div class="order-footer">
                    <div class="last-updated">
                        <i class="fas fa-sync-alt"></i>
                        Last updated: ${getTimeAgoFromDate(new Date(order.created_at))}
                    </div>
                    <a href="#" class="details-link" data-order-id="${order.id}">Details</a>
                </div>
            `;
            
            // Add event listener for the entire card
            div.addEventListener('click', () => {
                const m = markers.find(m => m.orderId === order.id);
                if (m) {
                    map.setView([m.coords.lat, m.coords.lon], 16, { animate: true });
                    m.marker.openPopup();
                }
                document.querySelectorAll('.order-item').forEach(el => el.classList.remove('selected'));
                div.classList.add('selected');
            });
            
            // Add event listeners for the details link and track button
            const detailsLink = div.querySelector('.details-link');
            const trackButton = div.querySelector('.track-button');
            
            detailsLink.addEventListener('click', async function(e) {
                e.preventDefault();
                e.stopPropagation(); // Prevent the order item click
                const orderId = this.getAttribute('data-order-id');
                
                // Switch to order details view
                const mapViewOptions = document.querySelectorAll('.map-view-option');
                mapViewOptions.forEach(opt => opt.classList.remove('active'));
                mapViewOptions[1].classList.add('active');
                document.getElementById('orderMap').style.display = 'none';
                document.getElementById('orderDetails').style.display = 'block';
                
                // Show loading state
                document.getElementById('orderDetails').querySelector('.order-details-content').innerHTML = `
                    <div class="order-details-loading">
                        <div class="spinner"></div>
                        <p>Loading order details...</p>
                    </div>
                `;
                
                // Fetch and display order details
                const orderData = await fetchOrderDetails(orderId);
                if (orderData) {
                    displayOrderDetails(orderData);
                } else {
                    document.getElementById('orderDetails').querySelector('.order-details-content').innerHTML = `
                        <div class="error-message">
                            <p>Failed to load order details. Please try again.</p>
                        </div>
                    `;
                }
                
                // Scroll to map container
                const mapContainer = document.querySelector('.live-tracking');
                if (mapContainer) {
                    mapContainer.scrollIntoView({ behavior: 'smooth' });
                }
            });
            
            trackButton.addEventListener('click', function(e) {
                e.stopPropagation(); // Prevent the order item click
                
                // Switch to live map view
                const mapViewOptions = document.querySelectorAll('.map-view-option');
                mapViewOptions.forEach(opt => opt.classList.remove('active'));
                mapViewOptions[0].classList.add('active');
                document.getElementById('orderMap').style.display = 'block';
                document.getElementById('orderDetails').style.display = 'none';
                
                // Highlight this order and center the map on it
                const m = markers.find(m => m.orderId === parseInt(this.getAttribute('data-order-id')));
                if (m) {
                    map.setView([m.coords.lat, m.coords.lon], 16, { animate: true });
                    m.marker.openPopup();
                }
                document.querySelectorAll('.order-item').forEach(el => el.classList.remove('selected'));
                div.classList.add('selected');
                
                // Scroll to map container
                const mapContainer = document.querySelector('.live-tracking');
                if (mapContainer) {
                    mapContainer.scrollIntoView({ behavior: 'smooth' });
                }
            });
            
            // Optionally select the first order by default
            if (idx === 0 && markers[0]) {
                setTimeout(() => {
                    map.setView([markers[0].coords.lat, markers[0].coords.lon], 16, { animate: true });
                    markers[0].marker.openPopup();
                    div.classList.add('selected');
                }, 500);
            }
            
            container.appendChild(div);
        });
        
        // Initialize event listeners for the newly created buttons
        initOrderItemEventListeners();
    }
    
    // Helper function for time ago based on a Date object
    function getTimeAgoFromDate(date) {
        const now = new Date();
        const diff = now - date;
        
        if (diff < 60000) { // less than 1 minute
            return 'Just now';
        } else if (diff < 3600000) { // less than 1 hour
            const mins = Math.floor(diff / 60000);
            return mins + (mins === 1 ? ' min ago' : ' mins ago');
        } else if (diff < 86400000) { // less than 1 day
            const hours = Math.floor(diff / 3600000);
            return hours + (hours === 1 ? ' hour ago' : ' hours ago');
        } else if (diff < 604800000) { // less than 1 week
            const days = Math.floor(diff / 86400000);
            return days + (days === 1 ? ' day ago' : ' days ago');
        }
        
        // Helper function for time ago based on a Date object
        function getTimeAgoFromDate(date) {
            const now = new Date();
            const diff = now - date;
            
            if (diff < 60000) { // less than 1 minute
                return 'Just now';
            } else if (diff < 3600000) { // less than 1 hour
                const mins = Math.floor(diff / 60000);
                return mins + (mins === 1 ? ' min ago' : ' mins ago');
            } else if (diff < 86400000) { // less than 1 day
                const hours = Math.floor(diff / 3600000);
                return hours + (hours === 1 ? ' hour ago' : ' hours ago');
            } else if (diff < 604800000) { // less than 1 week
                const days = Math.floor(diff / 86400000);
                return days + (days === 1 ? ' day ago' : ' days ago');
            } else {
                return date.toLocaleDateString();
            }
        }
        
        // Initialize event listeners for order items after they're added to the DOM
        function initOrderItemEventListeners() {
            // This function is now redundant since we add event listeners directly when creating the items
            // But kept for extensibility
        }

        // Function to display order details
        async function displayOrderDetails(orderId) {
            console.log(`Displaying details for order ${orderId}`);
            const orderDetailsContent = document.getElementById('orderDetails');
            orderDetailsContent.innerHTML = '<div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i></div><p class="text-center">Loading order details...</p>';
            
            try {
                const response = await fetch(`/ayskrimWebsite/api/orders/getOrderDetails.php?id=${orderId}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch order details');
                }
                
                const data = await response.json();
                const order = data.order;
                const orderItems = data.items;
                
                if (!order) {
                    orderDetailsContent.innerHTML = '<p class="text-center">Order not found</p>';
                    return;
                }
                
                console.log('Order details:', order);
                console.log('Order items:', orderItems);
                
                // Format order items HTML
                const items = orderItems.length ? orderItems.map(item => `
                <div class="order-item">
                    <div class="item-image">
                        <img src="${item.image_url || '/ayskrimWebsite/assets/images/placeholder.jpg'}" alt="${item.product_name}">
                    </div>
                    <div class="item-info">
                        <div class="item-name">${item.product_name}</div>
                        <div class="item-quantity">Qty: ${item.quantity}</div>
                        <div class="item-instructions">${item.special_instructions || 'No special instructions'}</div>
                    </div>
                    <div class="item-price">
                        <div class="price-tag">₱${parseFloat(item.price).toFixed(2)}</div>
                        <div class="subtotal">Subtotal: ₱${parseFloat(item.subtotal).toFixed(2)}</div>
                    </div>
                </div>
                `).join('') : '<p class="text-center">No items found</p>';
                
                orderDetailsContent.innerHTML = `
                    <div class="order-details-container">
                        <div class="order-details-header">
                            <h3>Order #${order.id}</h3>
                            <div class="order-status ${order.order_status.toLowerCase()}">${order.order_status}</div>
                        </div>
                        
                        <!-- Delivery Address Container - Full Width -->
                        <div class="details-section">
                            <h4><i class="fas fa-map-marker-alt"></i> Delivery Address</h4>
                            <div class="summary-item">
                                <span class="summary-value">${order.shipping_address}</span>
                            </div>
                        </div>
                        
                        <!-- Payment and Delivery Info Sections -->
                        <div class="order-info-sections">
                            <!-- Payment Information -->
                            <div class="details-section">
                                <h4><i class="fas fa-credit-card"></i> Payment Information</h4>
                                <div class="order-summary">
                                    <div class="summary-item">
                                        <span class="summary-label">Status:</span>
                                        <span class="summary-value payment-status-${order.payment_status.toLowerCase()}">${order.payment_status}</span>
                                    </div>
                                    <div class="summary-item">
                                        <span class="summary-label">Method:</span>
                                        <span class="summary-value">Cash on Delivery</span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Delivery Details -->
                            <div class="details-section">
                                <h4><i class="fas fa-truck"></i> Delivery Details</h4>
                                <div class="order-summary">
                                    <div class="summary-item">
                                        <span class="summary-label">Type:</span>
                                        <span class="summary-value">${order.delivery_type}</span>
                                    </div>
                                    <div class="summary-item">
                                        <span class="summary-label">Tracking Code:</span>
                                        <div class="tracking-code-container">${order.tracking_code}</div>
                                    </div>
                                    <div class="summary-item">
                                        <span class="summary-label">Estimated Delivery:</span>
                                        <span class="summary-value">${order.order_status}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Order Items Section -->
                        <div class="details-section">
                            <h4><i class="fas fa-ice-cream"></i> Order Items</h4>
                            <div class="order-items">
                                ${items}
                            </div>
                        </div>
                        
                        <!-- Order Summary Section -->
                        <div class="order-totals">
                            <div class="total-row">
                                <span>Total Amount:</span>
                                <span class="total-amount">₱${parseFloat(order.total_amount).toFixed(2)}</span>
                            </div>
                        </div>
                    </div>
                `;
            } catch (error) {
                console.error('Error displaying order details:', error);
                orderDetailsContent.innerHTML = '<p class="text-center">Failed to load order details. Please try again.</p>';
            }
        }

        document.addEventListener('DOMContentLoaded', renderActiveOrdersAndMap);
    });
});
